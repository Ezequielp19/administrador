{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2.entry.js"],"names":["infiniteScrollCss","InfiniteScroll","hostRef","ionInfinite","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","emit","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","console","error","getScrollElement","thresholdChanged","disabledChanged","clientHeight","undefined","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","loadingSpinner","get","name","loadingText","innerHTML","ios","md"],"mappings":"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","file":"14-es5.js","sourcesContent":["import { r as registerInstance, e as createEvent, c as writeTask, f as readTask, h, i as getElement, H as Host } from './index-7a8b7a1c.js';\r\nimport { b as getIonMode, c as config } from './ionic-global-63a97a32.js';\r\nimport { s as sanitizeDOMString } from './index-9e3fe806.js';\r\n\r\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\r\n\r\nconst InfiniteScroll = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\r\n    this.thrPx = 0;\r\n    this.thrPc = 0;\r\n    this.didFire = false;\r\n    this.isBusy = false;\r\n    this.isLoading = false;\r\n    /**\r\n     * The threshold distance from the bottom\r\n     * of the content to call the `infinite` output event when scrolled.\r\n     * The threshold value can be either a percent, or\r\n     * in pixels. For example, use the value of `10%` for the `infinite`\r\n     * output event to get called when the user has scrolled 10%\r\n     * from the bottom of the page. Use the value `100px` when the\r\n     * scroll is within 100 pixels from the bottom of the page.\r\n     */\r\n    this.threshold = '15%';\r\n    /**\r\n     * If `true`, the infinite scroll will be hidden and scroll event listeners\r\n     * will be removed.\r\n     *\r\n     * Set this to true to disable the infinite scroll from actively\r\n     * trying to receive new data while scrolling. This is useful\r\n     * when it is known that there is no more data that can be added, and\r\n     * the infinite scroll is no longer needed.\r\n     */\r\n    this.disabled = false;\r\n    /**\r\n     * The position of the infinite scroll element.\r\n     * The value can be either `top` or `bottom`.\r\n     */\r\n    this.position = 'bottom';\r\n    this.onScroll = () => {\r\n      const scrollEl = this.scrollEl;\r\n      if (!scrollEl || !this.canStart()) {\r\n        return 1;\r\n      }\r\n      const infiniteHeight = this.el.offsetHeight;\r\n      if (infiniteHeight === 0) {\r\n        // if there is no height of this element then do nothing\r\n        return 2;\r\n      }\r\n      const scrollTop = scrollEl.scrollTop;\r\n      const scrollHeight = scrollEl.scrollHeight;\r\n      const height = scrollEl.offsetHeight;\r\n      const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\r\n      const distanceFromInfinite = (this.position === 'bottom')\r\n        ? scrollHeight - infiniteHeight - scrollTop - threshold - height\r\n        : scrollTop - infiniteHeight - threshold;\r\n      if (distanceFromInfinite < 0) {\r\n        if (!this.didFire) {\r\n          this.isLoading = true;\r\n          this.didFire = true;\r\n          this.ionInfinite.emit();\r\n          return 3;\r\n        }\r\n      }\r\n      else {\r\n        this.didFire = false;\r\n      }\r\n      return 4;\r\n    };\r\n  }\r\n  thresholdChanged() {\r\n    const val = this.threshold;\r\n    if (val.lastIndexOf('%') > -1) {\r\n      this.thrPx = 0;\r\n      this.thrPc = (parseFloat(val) / 100);\r\n    }\r\n    else {\r\n      this.thrPx = parseFloat(val);\r\n      this.thrPc = 0;\r\n    }\r\n  }\r\n  disabledChanged() {\r\n    const disabled = this.disabled;\r\n    if (disabled) {\r\n      this.isLoading = false;\r\n      this.isBusy = false;\r\n    }\r\n    this.enableScrollEvents(!disabled);\r\n  }\r\n  async connectedCallback() {\r\n    const contentEl = this.el.closest('ion-content');\r\n    if (!contentEl) {\r\n      console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\r\n      return;\r\n    }\r\n    this.scrollEl = await contentEl.getScrollElement();\r\n    this.thresholdChanged();\r\n    this.disabledChanged();\r\n    if (this.position === 'top') {\r\n      writeTask(() => {\r\n        if (this.scrollEl) {\r\n          this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\r\n        }\r\n      });\r\n    }\r\n  }\r\n  disconnectedCallback() {\r\n    this.enableScrollEvents(false);\r\n    this.scrollEl = undefined;\r\n  }\r\n  /**\r\n   * Call `complete()` within the `ionInfinite` output event handler when\r\n   * your async operation has completed. For example, the `loading`\r\n   * state is while the app is performing an asynchronous operation,\r\n   * such as receiving more data from an AJAX request to add more items\r\n   * to a data list. Once the data has been received and UI updated, you\r\n   * then call this method to signify that the loading has completed.\r\n   * This method will change the infinite scroll's state from `loading`\r\n   * to `enabled`.\r\n   */\r\n  async complete() {\r\n    const scrollEl = this.scrollEl;\r\n    if (!this.isLoading || !scrollEl) {\r\n      return;\r\n    }\r\n    this.isLoading = false;\r\n    if (this.position === 'top') {\r\n      /**\r\n       * New content is being added at the top, but the scrollTop position stays the same,\r\n       * which causes a scroll jump visually. This algorithm makes sure to prevent this.\r\n       * (Frame 1)\r\n       *    - complete() is called, but the UI hasn't had time to update yet.\r\n       *    - Save the current content dimensions.\r\n       *    - Wait for the next frame using _dom.read, so the UI will be updated.\r\n       * (Frame 2)\r\n       *    - Read the new content dimensions.\r\n       *    - Calculate the height difference and the new scroll position.\r\n       *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\r\n       * (Still frame 2, if I'm correct)\r\n       *    - Change the scroll position (= visually maintain the scroll position).\r\n       *    - Change the state to re-enable the InfiniteScroll.\r\n       *    - This should be after changing the scroll position, or it could\r\n       *    cause the InfiniteScroll to be triggered again immediately.\r\n       * (Frame 3)\r\n       *    Done.\r\n       */\r\n      this.isBusy = true;\r\n      // ******** DOM READ ****************\r\n      // Save the current content dimensions before the UI updates\r\n      const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\r\n      // ******** DOM READ ****************\r\n      requestAnimationFrame(() => {\r\n        readTask(() => {\r\n          // UI has updated, save the new content dimensions\r\n          const scrollHeight = scrollEl.scrollHeight;\r\n          // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\r\n          const newScrollTop = scrollHeight - prev;\r\n          // ******** DOM WRITE ****************\r\n          requestAnimationFrame(() => {\r\n            writeTask(() => {\r\n              scrollEl.scrollTop = newScrollTop;\r\n              this.isBusy = false;\r\n            });\r\n          });\r\n        });\r\n      });\r\n    }\r\n  }\r\n  canStart() {\r\n    return (!this.disabled &&\r\n      !this.isBusy &&\r\n      !!this.scrollEl &&\r\n      !this.isLoading);\r\n  }\r\n  enableScrollEvents(shouldListen) {\r\n    if (this.scrollEl) {\r\n      if (shouldListen) {\r\n        this.scrollEl.addEventListener('scroll', this.onScroll);\r\n      }\r\n      else {\r\n        this.scrollEl.removeEventListener('scroll', this.onScroll);\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    const disabled = this.disabled;\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        'infinite-scroll-loading': this.isLoading,\r\n        'infinite-scroll-enabled': !disabled\r\n      } }));\r\n  }\r\n  get el() { return getElement(this); }\r\n  static get watchers() { return {\r\n    \"threshold\": [\"thresholdChanged\"],\r\n    \"disabled\": [\"disabledChanged\"]\r\n  }; }\r\n};\r\nInfiniteScroll.style = infiniteScrollCss;\r\n\r\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\r\n\r\nconst InfiniteScrollContent = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n  }\r\n  componentDidLoad() {\r\n    if (this.loadingSpinner === undefined) {\r\n      const mode = getIonMode(this);\r\n      this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\r\n    }\r\n  }\r\n  render() {\r\n    const mode = getIonMode(this);\r\n    return (h(Host, { class: {\r\n        [mode]: true,\r\n        // Used internally for styling\r\n        [`infinite-scroll-content-${mode}`]: true\r\n      } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\r\n  }\r\n};\r\nInfiniteScrollContent.style = {\r\n  ios: infiniteScrollContentIosCss,\r\n  md: infiniteScrollContentMdCss\r\n};\r\n\r\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\r\n"]}